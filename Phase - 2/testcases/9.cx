type data
<<
  number total;
  number tid; 
>>

func check : decimal x, decimal y : boolean 
<<
  when [(x^2+y^2 < 0)]
  <<
    return true;
  >>
  default
  <<
    return false;
  >>
>>

func findPi : number total, number tid : void
<<
  array decimal mem[100];
  mem[0] = p;
  number num_of_points = 0;
  decimal x,y;
  x = 0;
  y = 0;
  number i;
  i = 0;
  for[i=0|(i<p->data)|i+=1] 
  <<
    x = (invoke rand : null : )/1000;
    y = (invoke rand : null : )/1000;

    mem[i] = x;
    mem[i+1] = y;

    when[invoke check:x,y:]
    <<
      num_of_points += 1;
      mem(i+1) = x;
      mem(i+5) = y;
    >>
    default
    <<
      mem(i-1) = -2.0;
      mem(i+2) = -2.0;
    >>
  >>
>>

$$ tid is a keyword in the language 
task parallelpi: number N 
<<
  number thread = tid;
  invoke findPi:N,thread;
>>

start
<<
  number N;
  number Th;
  ip:N,Th-> "inp
  number i;
  i = 0;
  for[i = 2|i<=64|i ^= 2]
  <<
    make parallel parallelpi:i:10: N ;
  >>
>>




