func factorial : number b: number 
<<
    number res = 1, i; : declaration statement
   
    for [(i = 1 )| (i<= b )| (i += 1) ] : loop statement
    <<
        res *= i; : expression statement
    >>

    return res; : return statement  
>>


func add: number a, number b: number
<<
    number c = (a + b); : declaration statement
    return c; : return statement
>>



atomic func add:  decimal a, decimal b: decimal
<<
    decimal c = (a + b); : declaration statement
    <<
        number x = (a - b); : declaration statement
        c = (x + 2*b); : assignment statement
    >>
    return c; : return statement
>>

task parallelFact: null : task declaration statement
<<
    number thr = tid; : declaration statement
    invoke factorial:thr: ; : call statement
>>
number hi; : declaration statement


start : start declaration statement << 
    
    number n = 10; : declaration statement
    array number num[n]; : declaration statement

    for [ number i = 0 | (i < n) | i += 1] : loop statement 
    <<
        num[i] = i ; : assignment statement
    >>

    number a = 5 ; : declaration statement
    number b = 2; : declaration statement
    make parallel parallelFact: a : b : : call statement null: ;

    number res1 = invoke add: invoke add: 10,10 : , num[1]: ; : declaration statement

    decimal res2 = invoke add: 10.3, 2.3: ; : declaration statement

>>