atomic number counter = 0; : declaration statement 

type myType : type declaration statement <<

    number count; : declaration statement array number data[100]; : declaration statement 

    func printMsg : text msg, number c : void : function declaration statement
    << 
        when [ (c == 0)] : conditional statement <<
            in->c = c;
            in->count = c;
        >>
        text str = ("Message from myType: " # msg # "\n"); : declaration statement
    >>

>>

func incrCounter : number N : void
<<
    number i = 0; : declaration statement
    text t = "hi"; : declaration statement

    invoke obj->printMsg: ("Hello from the main thread") :; : call statement
    ip: thrs; : scan statement
    op -> "outptu.txt" : str # heyy # huuh; : print statement
    op: str#eeeee; : print statement
    repeat [ (i < N) ] : loop statement 
    <<
        counter += 1; : expression statement
        i += 1; : expression statement
    >>
>>


start : start declaration statement<<
    
    myType obj; : declaration statement 

    number thrs; : declaration statement 
    thrs = (2^b); : assignment statement

    ip: thrs, hiii; : scan statement
    op: str # heyy # huuh; : print statement
    op: str#eeeee; : print statement

    make parallel incrCounter : thrs * thrs : 4 : thrs :; : call statement  

    ip -> "inp.txt" : thrs; : scan statement
    
    op: str # heyy # huuh; : print statement
    op: str#eeeee; : print statement


    invoke obj->printMsg: ("Hello from the main thread"), 0:; : call statement

    ip: thrs; : scan statement
    op: str # heyy # huuh; : print statement
    op: str#eeeee; : print statement


>>