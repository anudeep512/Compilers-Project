

array number arr[10]; : declaration statement


type ThreadParams : type declaration statement 
<<
    number begin; : declaration statement
    number end; : declaration statement
    number result; : declaration statement
>>



task adder : array ThreadParams params
<< : task declaration statement
    params->result = 0; : assignment statement
    number i; : declaration statement
    number x; : declaration statement

    for [i = (params->begin)| (i < params->end) | i += 1] : loop statement
    <<
        params->result += arr[i]; : expression statement
    >>
        
>>

start : start declaration statement
<<

    number j = 0; : declaration statement  array number arr[100]; : declaration statement

    arr[2*i + j] = 9; : assignment statement

    repeat [(j < 10)] : loop statement
    <<
        arr[j] = j; : assignment statement
    >>

    
    number numThreads = 2; : declaration statement

    
    number chunkSize = (arraySize / numThreads); : declaration statement

    
    array ThreadParams params[numThreads]; : declaration statement


    
    for [number i = 0| (i < numThreads)| i += 1] : loop statement
    <<
        ThreadParams y = params[i]; : declaration statement
        y->begin = (i * chunkSize); : assignment statement
        y->end = ((y->begin) + chunkSize); : assignment statement

        when [(i == numThreads - 1)] : conditional statement
        <<
            y->end = 10; : assignment statement
        >>
    >>

    make parallel adder : numThreads : 1 : params :; : call statement

    

    number totalSum = 0; : declaration statement

    for [number i = 0| (i < numThreads)| i += 1] : loop statement
    <<
        ThreadParams y = params[i]; : declaration statement
        totalSum += (y->result); : expression statement
    >>

    
    op : totalSum; : print statement
>>
