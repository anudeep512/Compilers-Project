atomic array number a[5];

type H
<<
  func incre: number i : text 
  <<
    letter z ;
    return "hii" ;
  >>
>>

type AtomicClass
<<
  H ato;

  func incrementAtomicVar: number value : void
  <<
    H aa ;
    aa = in->ato ;

    text d = invoke aa->incre:value: ;
    op : d ;
    return void ;
  >>

  func getAtom : null : H
  <<
    return in->ato ;
  >>

  func isEven : null : bool
  <<
    return ~(in->ato) ;
  >>
>>

func global: number tno : void
<<
  AtomicClass y;
  for[number i=0| (i<5) | i += 1]
  <<
    op: i # " In thread : " # tno;
    invoke y->incrementAtomicVar: (i+1) : ;
  >>
  return void ;
>>

task ttsk: null
<<
  invoke global:tid:;
>>

start
<<
number a = 10;
number b =5 ;
  make parallel ttsk: a: b: null: ;
  decimal a = get->time;
>>
