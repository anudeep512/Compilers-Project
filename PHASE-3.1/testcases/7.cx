$*
This type is used to send required data to the threaded function 
*$

func rand : null : number 
<<
  return 100 ;

>>
type data
<<
  number total_cases_each_thread ; $$ This variable stores the value of number of test cases checked by the respective thread
  number threadnumber ; $$ The thread number of the thread is stored in this variable
>>

$$ Given in book that we consider the radius of circle as 1
func check_in_circle : decimal x, decimal y : bool 
<<
  when [(x + y - 1 < 0)] 
  <<
    return true;
  >>
  default << 
    return false;
  >>
>>

$$ This is the threaded function which is called when new threads are created

func func_pi : data dat : void 
<<

  $$ Typecasting is done so that we can access the data passed to the function
  $$  In otherwords arguments to the function is passed using pointer to the struct created



  array decimal mem[1000];
  mem[0] = (dat->total_cases_each_thread) ;
  number number_of_points_in_circle = 0;
  decimal x = 0, y = 0;
  for[number i = 0| (i < (dat->total_cases_each_thread)) | i+= 1 ]
  <<
  x = (invoke rand : null : + 2001 );
    x = ((invoke rand:null : % 2001 - 1000) / 1000 )  ;
    y = ((invoke rand:null : % 2001 - 1000) / 1000 ) ;
    mem[(4*i+2)] = x;
    mem[(4*i+3)] = y;

    when[invoke check_in_circle:x,y:]
    <<
      number_of_points_in_circle += 1;
      mem[(4*i+4)] = x;
      mem[(4*i+5)] = y;
    >>
    default
    <<  
      mem[(4*i+4)] = -2.0;
      mem[(4*i+5)] = -2.0;
    >>
  >>
  mem[1] = number_of_points_in_circle ;
  return void;
>>

task para: array number total_cases_per_thread
<<
  data dat ;
  dat->threadnumber = tid ;
  number a = tid ;
  dat->total_cases_each_thread = total_cases_per_thread[a] ;
  invoke func_pi : dat : ;
>>

start
<<

  number N = 0; $$ Total number of testcases for the program need to be checked
  number Th = 0; $$ Total number of threads used by the program
  ip->"inp.txt":N,Th;
  array number total_cases_each_thread[10000];
  for[number i = 0 | (i < Th) | i += 1]
  <<
    total_cases_each_thread[i] = (N/Th) ;
  >>

  $$ The residual value of N after distribution to the threads is distributed

  when[(N%Th != 0)]
  <<
    number residual = (N % Th) ;
    for[number i=0| (i < residual) | i += 1]
    <<
      total_cases_each_thread[i] += 1;
    >>
  >>
  number r =10;
  make parallel para : Th : r : total_cases_each_thread :;
  decimal tim = get->time ;
  number pi ;
  $$ The following is the block of code where writing to "output.txt" is done
  op-> "output.txt" : "Value Computed: " # pi  ;
  op-> "output.txt" : "Time: " # tim  ;
  op-> "output.txt" : "Log : "  ;



  for[number i = 0 | (i < Th) | i += 1]
  <<
    number J = (i +1); 
    op-> "output.txt": "Thread" # J # " : " ;
    op-> "output.txt": "Points inside the square: ";
    when[(i == Th - 1)]
    <<
      break;
    >>
    op-> "output.txt": "After conditional";
  >>

  <<
    $$ Syntax Error
   $$ number a = tid ;
  >>
>>
