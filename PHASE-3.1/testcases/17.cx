array number baa[10,20];
number b;
void a;
decimal c;
letter d;
text e;
array decimal caa[20, 30, 50], daa[90, 80];
bool f;
atomic array decimal caaaa[20, 30, 50];
void aa, db;
array text eaaa[3];
atomic decimal ca;
atomic number ba;
array letter daaa[1, 1];
atomic array number baaaa[10,20];
atomic letter da;
atomic text ea;
atomic array letter daaaaa[100, 1];
atomic bool fa;
text cxxx ;
array bool faaa[0];
atomic array text eaaaaa[3];
atomic array bool faaaaaaa[0];


start 
<<
  number a ;
  number b ;

  for[number i = 0 | (i > 9) | i += 1]
  <<
    text f ;
    decimal k ;
    <<
      number a ;
      <<
      number d ;
      text c ;
      >>
    >>
  >>

  number foo ;

  when[1]
  <<
    text f ;
    decimal k ;
    <<
      array number a[10] ;
      atomic array number b[10] ; 
      number aa ;
      <<
      number d ;
      text c ;
      >>
    >>
  >>

  <<
    number a ;
    <<
    text bison ;
    atomic array number n[10];
    >>
  >>

when [1] 
<<
  number a ; 
  decimal d = ((9.0 + a) + 10) ;
  <<
    array number a[100] ;
    atomic array decimal dude[10] ;
    letter aee ;
  >>
>>

else when [(8 - 9 >= 10)]
<<
  letter su ;
  decimal s ;
  text d ;
  <<
    number a ;
    << 
      number a ;
      << number a ; >>
    >>
  >>

  number a ;
>>

else when [(5+4/4 + 3 < 9)]
<<
  atomic number a ;
>>


default
<<
  number a ;
  << 
    text a ;
    << 
      letter a ;
      << 
        decimal a ;
      >>
    >>
  >>
>>

number i = 10 ;
when [(i + 9 == 0 )]
<<
  number thu ;
>>
default 
<<
  text fuu ;
>>

>>

type Teacher 
<<
  number a ;
  text c,d ;
  array number aeee[10] ;
  atomic array decimal h[100,22] ;
  number dee ;  
>>

type dude 
<<
  number b ;
  number x;

func new :  atomic number dudeee ,number aah, text nice, array decimal a : array number 
<<
  number ab ;
  decimal b ;
  array number ret[100];
  return ret ;
>>

func new :   number dudeee ,number aah, text nice, array decimal a : array number 
<<
  number ab ;
  decimal b ;
  array number ret[100];
  return ret ;
>>

>>


func new :  atomic number du ,number ah, text nice, array decimal a : array number 
<<
  number ab ;
  decimal b ;
  array number ao[200];
  return ao ;
>>

atomic func new : number du ,number ah, text nice, array decimal a : array number 
<<
  number ab ;
  decimal b ;
  << 
  number a ;
  decimal f ;
  << 
  number g ;
  >>
  >> 
  array number ao[200];
  return ao;
>>

number globalVar ;

task new1 :  atomic number du ,number aa, text nice, array decimal a
<<
  number ab ;
  decimal b ;

>>

number globalVar2 ;

number globalVar3 ;




